name: Lighthouse CI Performance Monitoring

# 성능 측정 자동화: PR 생성 시 자동으로 성능 측정 실행
# 프로덕션 Supabase DB를 사용하여 실제 데이터 기반 성능 테스트
on:
  pull_request:
    branches: [main]
    paths:
      - 'apps/web/**'           # 웹 앱 코드 변경 시
      - 'lighthouserc.js'       # Lighthouse 설정 변경 시
      - 'lighthouse-auth.js'    # 자동 로그인 스크립트 변경 시

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    
    # 🚀 리소스 할당 최적화
    timeout-minutes: 15  # 타임아웃 설정으로 무한 대기 방지
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write
      actions: read

    env:
      # Lighthouse CI 테스트용 환경변수
      LIGHTHOUSE_TEST_EMAIL: ${{ secrets.LIGHTHOUSE_TEST_EMAIL }}
      LIGHTHOUSE_TEST_PASSWORD: ${{ secrets.LIGHTHOUSE_TEST_PASSWORD }}
      LIGHTHOUSE_BASE_URL: http://localhost:3001

      # Supabase 프로덕션 DB 설정
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # Supabase 프로덕션 Database 연결 (Connection Pooling)
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # GitHub 토큰 (PR 코멘트용)
      LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 🚀 성능 최적화 환경변수
      NODE_OPTIONS: "--max-old-space-size=4096"  # Node.js 메모리 증가
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # 🚀 병렬 처리: 의존성 설치와 동시에 Lighthouse CI 설치
      - name: 📥 Install dependencies & Lighthouse CI
        run: |
          # 병렬로 설치 실행
          pnpm install --frozen-lockfile &
          npm install -g @lhci/cli@0.15.x &
          wait  # 모든 백그라운드 작업 완료 대기
          
          echo "✅ Dependencies and Lighthouse CI installed"
          lhci --version

      - name: 💾 Cache Prisma client
        uses: actions/cache@v4
        with:
          path: apps/web/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('apps/web/lib/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: 🗄️ Generate Prisma client (with cache)
        run: |
          cd apps/web
          echo "🚀 Generating Prisma client..."
          pnpm postinstall
          echo "🔍 Checking Prisma client generation..."
          ls -la node_modules/.prisma/client/ || echo "Prisma client not found"

      - name: 💾 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next/cache
            apps/web/.next/static
            apps/web/.next/standalone
            .turbo
          key: ${{ runner.os }}-build-${{ hashFiles('apps/web/**/*.{js,jsx,ts,tsx}', 'packages/**/*.{js,jsx,ts,tsx}', 'apps/web/package.json', 'pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-

      # 🚀 빌드 최적화
      - name: 🏗️ Build applications (optimized)
        run: |
          echo "🚀 Building with maximum optimization..."
          
          # Prisma 클라이언트 존재 확인
          if [ ! -d "apps/web/node_modules/.prisma/client" ]; then
            echo "⚠️ Prisma client not found, regenerating..."
            cd apps/web && pnpm postinstall && cd ..
          fi
          
          # 최적화된 빌드 실행
          pnpm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          # 🚀 빌드 성능 최적화
          NEXT_OPTIMIZE_IMAGES: false  # 이미지 최적화 스킵 (CI에서는 불필요)
          NEXT_DISABLE_TELEMETRY: true

      # 🚀 서버 시작 최적화
      - name: 🚀 Start application server (optimized)
        run: |
          cd apps/web
          echo "🚀 Starting server with optimized settings..."
          
          # 백그라운드에서 서버 시작
          NODE_ENV=production pnpm start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "📝 Server PID: $SERVER_PID"
          
          # 🚀 효율적인 헬스체크 (최대 60초, 2초 간격)
          echo "⏳ Waiting for server..."
          timeout 60s bash -c '
            while ! curl -f http://localhost:3001/api/health >/dev/null 2>&1; do
              echo "🔍 Server not ready, waiting..."
              sleep 2
            done
          '
          
          echo "✅ Server is ready!"
        env:
          NODE_ENV: production

      # 🚀 Puppeteer 최적화 (캐시 활용)
      - name: 🔧 Setup Puppeteer (cached)
        run: |
          # 캐시된 Puppeteer 사용 또는 새로 설치
          if [ -d "apps/web/node_modules/puppeteer" ]; then
            echo "✅ Using cached Puppeteer from apps/web"
            CHROME_PATH=$(node -e "console.log(require('./apps/web/node_modules/puppeteer').executablePath())")
          elif [ -d "node_modules/puppeteer" ]; then
            echo "✅ Using cached Puppeteer from root"
            CHROME_PATH=$(node -e "console.log(require('puppeteer').executablePath())")
          else
            echo "📦 Installing Puppeteer..."
            npm install puppeteer@24.15.0
            CHROME_PATH=$(node -e "console.log(require('puppeteer').executablePath())")
          fi
          
          echo "CHROME_PATH=$CHROME_PATH" >> $GITHUB_ENV
          echo "🔍 Chrome path: $CHROME_PATH"
          
          # Chrome 버전 확인
          "$CHROME_PATH" --version

      # 🚀 Lighthouse CI 실행 (최적화된 설정)
      - name: 🔍 Run Lighthouse CI (optimized)
        run: |
          echo "🚀 Running Lighthouse CI with optimized settings..."
          echo "📊 Measuring $(node -e "console.log(require('./lighthouserc.js').ci.collect.url.length)") pages"
          echo "🔄 $(node -e "console.log(require('./lighthouserc.js').ci.collect.numberOfRuns)") runs per page"
          
          # 시간 측정 시작
          start_time=$(date +%s)
          
          # Lighthouse CI 실행
          lhci autorun
          
          # 실행 시간 계산
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "⏱️ Lighthouse CI completed in ${duration} seconds"
        env:
          # Lighthouse CI가 GitHub PR에 코멘트를 달 수 있도록
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: |
            .lighthouseci/**/*
            lighthouse-*.png
          retention-days: 7
          if-no-files-found: warn

      # 🚀 향상된 PR 코멘트 (실행 시간 포함)
      - name: 💬 Enhanced PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const resultsDir = '.lighthouseci';
              if (!fs.existsSync(resultsDir)) {
                console.log('No Lighthouse results found');
                return;
              }

              const files = fs.readdirSync(resultsDir);
              const manifestFile = files.find(f => f.includes('manifest.json'));
              
              if (!manifestFile) {
                console.log('No manifest file found');
                return;
              }

              const manifest = JSON.parse(
                fs.readFileSync(path.join(resultsDir, manifestFile), 'utf8')
              );
              
              let comment = '## 🚀 Lighthouse CI Performance Report (Optimized)\n\n';
              comment += `📊 **Measured ${manifest.length} core pages** • ⚡ **Optimized for speed**\n\n`;
              comment += '| Page | Performance | PWA | Report |\n';
              comment += '|------|-------------|-----|--------|\n';
              
              manifest.forEach(result => {
                const scores = result.summary;
                const url = result.url.replace('http://localhost:3001', '') || '/';
                const perfScore = Math.round(scores.performance * 100);
                const pwaScore = Math.round(scores.pwa * 100);
                
                // 성능 점수에 따른 이모지
                const perfEmoji = perfScore >= 90 ? '🟢' : perfScore >= 70 ? '🟡' : '🔴';
                const pwaEmoji = pwaScore >= 90 ? '🟢' : pwaScore >= 70 ? '🟡' : '🔴';
                
                comment += `| ${url} | ${perfEmoji} ${perfScore} | ${pwaEmoji} ${pwaScore} | [View](${result.htmlPath}) |\n`;
              });
              
              comment += '\n---\n';
              comment += '⚡ **Optimization applied**: Core pages only, 2 runs per page, performance-focused categories\n';
              comment += '📈 **Focus**: Core Web Vitals, PWA compliance, Critical User Journey';

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('Successfully posted enhanced PR comment');
              
            } catch (error) {
              console.error('Error creating PR comment:', error);
            }

      - name: 🧹 Cleanup
        if: always()
        run: |
          # 서버 정리
          if [ -n "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
          # 포트 기반 정리
          lsof -ti:3001 | xargs kill -9 2>/dev/null || true
