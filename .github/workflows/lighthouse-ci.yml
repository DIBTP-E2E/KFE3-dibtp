name: Lighthouse CI Performance Monitoring

# 성능 측정 자동화: PR 생성 시 자동으로 성능 측정 실행
# 프로덕션 Supabase DB를 사용하여 실제 데이터 기반 성능 테스트
on:
  pull_request:
    branches: [main]
    paths:
      - 'apps/web/**'           # 웹 앱 코드 변경 시
      - 'lighthouserc.js'       # Lighthouse 설정 변경 시
      - 'lighthouse-auth.js'    # 자동 로그인 스크립트 변경 시

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest

    env:
      # Lighthouse CI 테스트용 환경변수
      LIGHTHOUSE_TEST_EMAIL: ${{ secrets.LIGHTHOUSE_TEST_EMAIL }}
      LIGHTHOUSE_TEST_PASSWORD: ${{ secrets.LIGHTHOUSE_TEST_PASSWORD }}
      LIGHTHOUSE_BASE_URL: http://localhost:3001

      # Supabase 프로덕션 DB 설정
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # Supabase 프로덕션 Database 연결 (Connection Pooling)
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # GitHub 토큰 (PR 코멘트용)
      LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 💾 Cache Prisma client
        uses: actions/cache@v4
        with:
          path: apps/web/lib/prisma/generated
          key: ${{ runner.os }}-prisma-${{ hashFiles('apps/web/lib/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: 🗄️ Generate Prisma client (with cache)
        run: |
          cd apps/web
          echo "🚀 Generating Prisma client (cached if possible)..."
          pnpm postinstall

      - name: 💾 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next/cache
            apps/web/.next/static
            apps/web/.next/standalone
            .turbo
          key: ${{ runner.os }}-build-${{ hashFiles('apps/web/**/*.{js,jsx,ts,tsx}', 'packages/**/*.{js,jsx,ts,tsx}', 'apps/web/package.json', 'pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: 🏗️ Build applications (with cache)
        run: |
          echo "🚀 Building with enhanced caching..."
          # Turborepo와 Next.js 캐시 활용
          pnpm run build
        env:
          NODE_ENV: production
          # Next.js 빌드 최적화
          NEXT_TELEMETRY_DISABLED: 1

      - name: 🚀 Start application server
        run: |
          cd apps/web
          echo "🚀 Starting Next.js production server..."
          
          # 서버 시작 (로그 출력)
          pnpm start &
          SERVER_PID=$!
          echo "📝 Server PID: $SERVER_PID"
          
          # 포트 확인
          echo "🔍 Checking if port 3001 is available..."
          netstat -tulpn | grep :3001 || echo "Port 3001 not in use yet"
          
          # 서버 시작 대기 (더 긴 간격, 더 긴 타임아웃)
          echo "⏳ Waiting for server to be ready..."
          sleep 10  # 초기 대기
          
          for i in {1..20}; do
            echo "🔍 Attempt $i: Checking server health..."
            if curl -f http://localhost:3001/api/health; then
              echo "✅ Server is ready!"
              break
            fi
            
            if [ $i -eq 20 ]; then
              echo "❌ Server failed to start after 20 attempts"
              echo "📊 Process status:"
              ps aux | grep node
              echo "📊 Port status:"
              netstat -tulpn | grep :3001
              exit 1
            fi
            
            sleep 5
          done
        env:
          NODE_ENV: production

      - name: 🔧 Install Lighthouse CI and Debug Puppeteer
        run: |
          # Lighthouse CI 전역 설치
          npm install -g @lhci/cli@0.15.x
          lhci --version
          
          # Puppeteer 상황 디버깅
          echo "🔍 Debugging Puppeteer installation..."
          echo "Current directory: $(pwd)"
          echo "Checking apps/web/node_modules:"
          ls -la apps/web/node_modules/ | grep puppeteer || echo "❌ No puppeteer in apps/web/node_modules"
          
          echo "Checking if puppeteer package exists:"
          if [ -d "apps/web/node_modules/puppeteer" ]; then
            echo "✅ apps/web/node_modules/puppeteer exists"
            ls -la apps/web/node_modules/puppeteer/
            
            # Puppeteer Chrome 경로 확인
            node -e "
              const puppeteer = require('./apps/web/node_modules/puppeteer');
              console.log('✅ Puppeteer Chrome path:', puppeteer.executablePath());
            " || echo "❌ Failed to get Chrome path from apps/web puppeteer"
          else
            echo "❌ apps/web/node_modules/puppeteer does not exist"
            echo "Installing puppeteer in project root..."
            npm init -y
            npm install puppeteer@24.15.0
            node -e "console.log('✅ Root Puppeteer Chrome path:', require('puppeteer').executablePath());"
          fi

      - name: 🔍 Run Lighthouse CI
        run: |
          # Puppeteer Chrome 경로를 환경변수로 설정
          export CHROME_PATH=$(node -e "
            try {
              const puppeteer = require('./apps/web/node_modules/puppeteer');
              console.log(puppeteer.executablePath());
            } catch (e) {
              try {
                const puppeteer = require('puppeteer');
                console.log(puppeteer.executablePath());
              } catch (e2) {
                console.log('');
              }
            }
          ")
          
          echo "🔍 Using Chrome at: $CHROME_PATH"
          
          # Chrome 실행 테스트
          if [ -n "$CHROME_PATH" ] && [ -f "$CHROME_PATH" ]; then
            echo "✅ Chrome executable found and accessible"
            $CHROME_PATH --version
          else
            echo "❌ Chrome executable not found at: $CHROME_PATH"
            exit 1
          fi
          
          # Lighthouse CI 실행 (환경변수로 Chrome 경로 전달)
          lhci autorun
        env:
          # Lighthouse CI가 GitHub PR에 코멘트를 달 수 있도록
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: |
            .lighthouseci/
            lighthouse-login-error.png
          retention-days: 7

      - name: 💬 Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Lighthouse 결과 파일 찾기
            const resultsDir = '.lighthouseci';
            if (fs.existsSync(resultsDir)) {
              const files = fs.readdirSync(resultsDir);
              const manifestFile = files.find(f => f.includes('manifest.json'));
              
              if (manifestFile) {
                const manifest = JSON.parse(
                  fs.readFileSync(path.join(resultsDir, manifestFile), 'utf8')
                );
                
                let comment = '## 🚀 Lighthouse CI Performance Report\n\n';
                comment += '| Page | Performance | PWA | Accessibility | Best Practices | SEO |\n';
                comment += '|------|-------------|-----|---------------|----------------|-----|\n';
                
                manifest.forEach(result => {
                  const scores = result.summary;
                  const url = new URL(result.url).pathname;
                  comment += `| ${url} | ${Math.round(scores.performance * 100)} | ${Math.round(scores.pwa * 100)} | ${Math.round(scores.accessibility * 100)} | ${Math.round(scores['best-practices'] * 100)} | ${Math.round(scores.seo * 100)} |\n`;
                });
                
                comment += '\n📊 [View detailed report](' + manifest[0].htmlPath + ')';
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }

      - name: 🧹 Cleanup
        if: always()
        run: |
          # 서버 프로세스 종료
          pkill -f "next start" || true
          pkill -f "node" || true
